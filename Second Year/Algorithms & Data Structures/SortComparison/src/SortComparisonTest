import static org.junit.Assert.*;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.Arrays;
import org.junit.Test;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

//-------------------------------------------------------------------------
/**
 *  Test class for SortComparison.java
 *
 *  @author Leona Wolff
 *  @version HT 2020
 */
@RunWith(JUnit4.class)

public class SortComparisonTest{
	//~ Constructor ........................................................
	@Test
	public void testConstructor() {
		new SortComparison();
	}

	//~ Public Methods ........................................................

	// ----------------------------------------------------------
	/**
	 * Check that the methods work for empty arrays
	 */
	@Test
	public void testEmpty() {
		double[] a = {};
		assertArrayEquals("Checking empty insertionSort", a, SortComparison.insertionSort(a), 0);
		assertArrayEquals("Checking empty selectionSort", a, SortComparison.selectionSort(a), 0);
		assertArrayEquals("Checking empty quickSort", a, SortComparison.quickSort(a), 0);
		assertArrayEquals("Checking empty mergeSortIterative", a, SortComparison.mergeSortIterative(a), 0);
		assertArrayEquals("Checking empty mergeSortRecursive", a, SortComparison.mergeSortRecursive(a), 0);
	}


	// TODO: add more tests here. Each line of code and ech decision in Collinear.java should
	// be executed at least once from at least one test.

	// ----------------------------------------------------------
	/**
	 *  Main Method.
	 *  Use this main method to create the experiments needed to answer the experimental performance questions of this assignment.
	 *
	 */
	@Test
	public void main() {

		double a[] = readFile(new double[10], "numbers10.txt");
		double b[] = readFile(new double[100], "numbers100.txt");
		double c[] = readFile(new double[1000], "numbers1000.txt");
		double d[] = readFile(new double[1000], "numbers1000Duplicates.txt");
		double e[] = readFile(new double[1000], "numbersNearlyOrdered1000.txt");
		double f[] = readFile(new double[1000], "numbersReverse1000.txt");
		double g[] = readFile(new double[1000], "numbersSorted1000.txt");
		
		testTextFiles(a);
		testTextFiles(b);
		testTextFiles(c);
		testTextFiles(d);
		testTextFiles(e);
		testTextFiles(f);
		testTextFiles(g);

	} 

	public static double[] readFile(double[] a, String fileName) {
		try {
			String line;
			BufferedReader br = new BufferedReader(new FileReader(new File(fileName)));
			while((line = br.readLine())!= null){
				String [] r = line.split("\n");

				for(int i = 0; i < r.length; i++){
					double val = Double.parseDouble(r[i]);
					a[i] = val;
				}
			}
			br.close();
		}
		catch(Exception e){
			System.out.println("Oh no, something went wrong!");			
		}

		return a;
	}

	public static void testTextFiles(double arr[]) {

		SortComparison.insertionSort(arr);
		SortComparison.selectionSort(arr);
		SortComparison.quickSort(arr);
		SortComparison.mergeSortIterative(arr);
		SortComparison.mergeSortRecursive(arr);


	}



}
